// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/detector.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'yolo/utils.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.1';

  @override
  int get rustContentHash => 1551990353;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_save_my_back',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiDetectorGetHint({required PoseState state});

  PoseState crateApiDetectorGetPoseStateByIndex({required BigInt index});

  BigInt crateApiDetectorGetPoseType({required PoseState state});

  Future<(Uint8List, List<PoseState>)?> crateApiDetectorInfer(
      {required List<int> imgBytes});

  Future<String> crateApiDetectorInitModels({required String modelPath});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiDetectorGetHint({required PoseState state}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_pose_state(state, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDetectorGetHintConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDetectorGetHintConstMeta => const TaskConstMeta(
        debugName: "get_hint",
        argNames: ["state"],
      );

  @override
  PoseState crateApiDetectorGetPoseStateByIndex({required BigInt index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pose_state,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDetectorGetPoseStateByIndexConstMeta,
      argValues: [index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDetectorGetPoseStateByIndexConstMeta =>
      const TaskConstMeta(
        debugName: "get_pose_state_by_index",
        argNames: ["index"],
      );

  @override
  BigInt crateApiDetectorGetPoseType({required PoseState state}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_pose_state(state, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDetectorGetPoseTypeConstMeta,
      argValues: [state],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDetectorGetPoseTypeConstMeta =>
      const TaskConstMeta(
        debugName: "get_pose_type",
        argNames: ["state"],
      );

  @override
  Future<(Uint8List, List<PoseState>)?> crateApiDetectorInfer(
      {required List<int> imgBytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(imgBytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_record_list_prim_u_8_strict_list_pose_state,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDetectorInferConstMeta,
      argValues: [imgBytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDetectorInferConstMeta => const TaskConstMeta(
        debugName: "infer",
        argNames: ["imgBytes"],
      );

  @override
  Future<String> crateApiDetectorInitModels({required String modelPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(modelPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDetectorInitModelsConstMeta,
      argValues: [modelPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDetectorInitModelsConstMeta => const TaskConstMeta(
        debugName: "init_models",
        argNames: ["modelPath"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  PoseState dco_decode_box_autoadd_pose_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pose_state(raw);
  }

  @protected
  (Uint8List, List<PoseState>)
      dco_decode_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as (Uint8List, List<PoseState>);
  }

  @protected
  List<PoseState> dco_decode_list_pose_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_pose_state).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  (Uint8List, List<PoseState>)?
      dco_decode_opt_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
            raw);
  }

  @protected
  PoseState dco_decode_pose_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PoseState_Good();
      case 1:
        return PoseState_Nobody();
      case 2:
        return PoseState_PointsCountError(
          dco_decode_usize(raw[1]),
        );
      case 3:
        return PoseState_HeadOffsetTooMuch();
      case 4:
        return PoseState_HeadInclinedTooMuch();
      case 5:
        return PoseState_ShoulderHeightDiffTooMuch();
      case 6:
        return PoseState_SpineAlignment();
      case 7:
        return PoseState_LeftArmAngleNotGood();
      case 8:
        return PoseState_RightArmAngleNotGood();
      case 9:
        return PoseState_LeftLegAngleNotGood();
      case 10:
        return PoseState_RightLegAngleNotGood();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (Uint8List, List<PoseState>)
      dco_decode_record_list_prim_u_8_strict_list_pose_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_8_strict(arr[0]),
      dco_decode_list_pose_state(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  PoseState sse_decode_box_autoadd_pose_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pose_state(deserializer));
  }

  @protected
  (Uint8List, List<PoseState>)
      sse_decode_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_record_list_prim_u_8_strict_list_pose_state(
        deserializer));
  }

  @protected
  List<PoseState> sse_decode_list_pose_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PoseState>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_pose_state(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  (Uint8List, List<PoseState>)?
      sse_decode_opt_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  PoseState sse_decode_pose_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return PoseState_Good();
      case 1:
        return PoseState_Nobody();
      case 2:
        var var_field0 = sse_decode_usize(deserializer);
        return PoseState_PointsCountError(var_field0);
      case 3:
        return PoseState_HeadOffsetTooMuch();
      case 4:
        return PoseState_HeadInclinedTooMuch();
      case 5:
        return PoseState_ShoulderHeightDiffTooMuch();
      case 6:
        return PoseState_SpineAlignment();
      case 7:
        return PoseState_LeftArmAngleNotGood();
      case 8:
        return PoseState_RightArmAngleNotGood();
      case 9:
        return PoseState_LeftLegAngleNotGood();
      case 10:
        return PoseState_RightLegAngleNotGood();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (Uint8List, List<PoseState>)
      sse_decode_record_list_prim_u_8_strict_list_pose_state(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_field1 = sse_decode_list_pose_state(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_pose_state(
      PoseState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pose_state(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
      (Uint8List, List<PoseState>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_record_list_prim_u_8_strict_list_pose_state(self, serializer);
  }

  @protected
  void sse_encode_list_pose_state(
      List<PoseState> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_pose_state(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
      (Uint8List, List<PoseState>)? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_list_prim_u_8_strict_list_pose_state(
          self, serializer);
    }
  }

  @protected
  void sse_encode_pose_state(PoseState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PoseState_Good():
        sse_encode_i_32(0, serializer);
      case PoseState_Nobody():
        sse_encode_i_32(1, serializer);
      case PoseState_PointsCountError(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(field0, serializer);
      case PoseState_HeadOffsetTooMuch():
        sse_encode_i_32(3, serializer);
      case PoseState_HeadInclinedTooMuch():
        sse_encode_i_32(4, serializer);
      case PoseState_ShoulderHeightDiffTooMuch():
        sse_encode_i_32(5, serializer);
      case PoseState_SpineAlignment():
        sse_encode_i_32(6, serializer);
      case PoseState_LeftArmAngleNotGood():
        sse_encode_i_32(7, serializer);
      case PoseState_RightArmAngleNotGood():
        sse_encode_i_32(8, serializer);
      case PoseState_LeftLegAngleNotGood():
        sse_encode_i_32(9, serializer);
      case PoseState_RightLegAngleNotGood():
        sse_encode_i_32(10, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_record_list_prim_u_8_strict_list_pose_state(
      (Uint8List, List<PoseState>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_list_pose_state(self.$2, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
